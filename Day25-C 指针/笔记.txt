目标
   人们使用C语言操作内存的历史
   掌握指针变量的声明和赋值
   掌握常用指针类型
   指针变量的引用

1、人们使用C语言操作内存的历史
   
内存空间的代码访问方式：
(1)通过变量名访问；
(2)通过地址访问；

   早期的存储设备：磁带、硬盘、光盘、、、，都有一个缺点，速度慢。CPU 要想
发挥很好的性能，就需要一个中间的设备，速度快、能够直接与 CPU 进行交互，
发展出来了内存。
   早期的内存容量都非常小 56kb 。程序员都可以直接通过记忆内存的地址，进行
编程。这样的程序，比较底层、人无法很好的理解。人们对常用的 二进制代码进行模块化
给每个模块命名，创造出了指令集语言 --- 汇编指令集语言
  人们又在汇编语言基础上，发明了 自然语言描述的 代码。int i =100;
隐藏了很多底层的操作，多采用命名的方式进行引用---变量名、函数名。
   
   但是早期人们使用编程语言操作内存的习惯，在 C 语言中很好的保留下来，叫指针。

1011001010   MOV
1010101010
1011101101






2、掌握指针变量的声明和赋值
指针的概念：
  指针(*)：内存地址，用于间接访问内存单元中的值
  指针变量：用于存放地址的变量，必须跟在 * 后面


int i = 3;
////////指针的定义////////////
int *p;  //p 指针变量名    ＊ 指针符号   int  是 p 所在内存中存放的值的类型 
p = NULL;    ==   p = 0; //定义但是不马上使用，一定要防止 p 变成野指针

////////指针的赋值////////////
p = &i; //取变量对应的值的地址

////////指针的使用////////////
*p = 3;  //把 p 指向的地址中的值改为 3


在淘宝上买东西：
变量名 : 网店的名称(代号)
指针  : 百度地图地址(固定)



3、掌握常用指针类型
  所有指针地址 p 的类型，统一为 unsigned long int；
  类型?  *p  :之前学过的基础数据类型，都可以修饰 *p，包括数组，结构体，函数
  int *p 、 double *p、char *p、char [] p、、、

  void  *p  : void 表示没有， void *p 代表 *p 可以指向任意类型的数据
  //如果知道void *p 指向内容是 int 类型，取出时强转为 int 类型
  *p = 10;    -->    int num = (int *)p;  //把void * 强转为 int *
  *p = 'a';
 
    
4、指针变量的引用
指向指针的指针  int **p;

淘宝网店铺名称 : 麦町 可穿戴设备
实体店名称    : 上海徐家汇百脑汇 3012 室

int n = 10;  //n -> '麦町 可穿戴设备'
int *p = &n; //p -> '上海徐家汇百脑汇 3012 室' 

int **pt = &p;//












