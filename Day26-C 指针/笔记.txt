目标
   回顾 C 语言指针及如何使用指针操作数组中数据  
   了解指针和函数的结合使用
   掌握指针与字符串的结合使用

1、回顾 C 语言指针及如何使用指针操作数组中数据
   在 C 语言中，可以通过  & 得到某个变量指向的内存地址。
   
     数组在 C 语言中，分配连续的内存空间；［数组指针］   数组名，代表数组的起始地址，也是数组的指针；   每个数组元素都有自己单独的指针；   使用指针操作数组元素，能够精确控制每个内存中值的变化，节约内存；   指针对应的值是变量、数组名对应的值是常量；(page 12 13)1)用数组下标可以取数组中的值，用指针也可以取数组中的值；2)下标从 0 开始，指针从 数组名(数组第一个内存地址) 开始；3)内存地址是连续的，值不是连续的，由数据类型决定；----------------array[0] = 1             //使用数组名访问数组中的值&array[0] = 1606416368   //通过数组名和索引，得到数组首地址array+0 = 1606416368     //通过数组名，也可以得到数组首地址*(array+0) = 1         //数组名，也可以当作指针来使用［指针数组］就是一个普通的数组，里面存储的值，全部是指针(内存地址).是一个名词，作用可以把零散的 内存，归纳到一个数组中集中管理。2、掌握指针与字符串的结合使用  字符串就是 字符数组
  char arr[10] = {'h','e','l','l','o',' ','i','O','S','\0'};  char arr[] = "hello iOS"; //不带 \0 结束符号 数组长度 9
  char * arr  = "hello iOS";

  字符串特征：""
  C 语言中，没有专门的类型，描述字符串。int double  float
  只提供了一种间接的方式，字符数组描述字符串.
  学习完指针后，C 语言中可以用指针，专门描述字符串类型  (char *)3、了解指针与函数的结合使用 函数分为三个组成部分：函数名字、函数参数、函数返回值。 都可以用指针修饰   void (*functionName)(int a);  //函数指针   void functionName(int *p);    //普通函数	//这里交换指针的值	void swap(int * _p1,int * _p2)	{    			int temp;    			temp = *_p1;  //把_p1 中的值取出赋值给 temp    			*_p1 = *_p2;    			*_p2 = temp;}   (int *) functionName(int a);  //指针函数   (void *) functionName(int a);           //这里交换指针的值	int * swap(int * _p1,int * _p2)	{    			int *temp;    			temp = _p1; //直接把地址赋值给temp    			_p1 = _p2;    			_p2 = temp;			return temp;}          在程序运行中，函数代码是程序的算法指令部分，它们和数组一样也占用存储空间，都有相应的地址。a、可以使用    指针变量  指向   数组的首地址，b、也可以使用  指针变量  指向  函数代码的首地址，c、指向   函数代码首地址的指针变量   称为  函数指针。(指向函数首地址的指针)





总结：
1、回顾什么是指针
2、回顾指针如何操作一维数组
3、分析指针如何操作二维数组
4、如何给函数，传递指针参数
5、如何使用指针，定义字符串，把字符串看作数组进行使用

















