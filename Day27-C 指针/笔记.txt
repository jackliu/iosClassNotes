目标
   理解常量指针和指针常量
   指针数组与数组指针
   了解指针与函数的结合使用
1、理解 “常量指针”和 “指针常量”
  const 表示常量。 
  const 修饰符可以修饰:
  (1)修饰变量，表示该变量的值永远不能改变
     const  int a =10;   //全局变量
  (2)修饰函数的参数，表示该参数在函数内部，不能改变
 void Print(const int nVal) {    printf(“%d\n”,nVal);    //正确，可以使用参数的值    nVal = 10;              //错误，不能修改参数的值 }
  (3)修饰函数的返回值，表示该返回值只能被调用，不能被修改
   const int getXX()
   {
	const int num = 10;
        //.….
        return num; 
   }------------------------------------------   int const *p;   const int *p;   相同点： *p 、  int   不同点： const  位置主语  谓语  宾语今天天气不错   重点 : *p    指针变量，      p 中内存地址可以变，*p 指向的内存中的内容不能变；     搬家例子：租房子住，换地址，但是家人不变。
   常量指针 : 重点修饰 * 指针所指向的内存中的内容。
       指针所指向的内容不能变－－－－－－－－－－－－－－－－－－－－－－   int * const p;   重点:  p           const p  意思是，p 中存放的地址值不能改变。  买房子例子：买房子住，地址固定，家人可以变化。
   指针常量 : 重点修饰 p 所存储的内存地址，强调内存地址不能变化－－－－－－－－－－－－－－－－－－－－－－－   Const int * counst p;   同时满足两个条件：      房子地址固定，房子中的人也不变。     2、指针数组与数组指针
  *  []
  [*] 
  指针数组： 数组中存放的全部是指针的数组，常用形式 二维数组
    int * a[10]={地址1,地址2,地址3,地址4,…};

  数组指针： 指向数组的指针。数组名本身就是数组的指针。
    指向数组的指针----数组指针
    可以采用另外一种方式替换，意义一样
      int a[5]={1,2,3,4,5};  //直接拿 a <当>指针使用
      int *p = (int *)&a;//<当>毕竟不是真正的，所以专门定义一个真正的指针3、了解指针与函数的结合使用 定义函数分为三个组成部分：函数名字、函数参数、函数返回值。

   返回值  函数名(函数参数)
  (1)函数名，我们调用的依据，通过函数名调用该函数
  (2)函数参数，我们给函数下的命令，告诉函数我们希望它做什么
  (3)返回值，函数告诉我们的结果

  函数与指针配合使用
  (1)* 函数名，指向函数的指针---函数指针
  (2)* 函数参数，函数参数是指针
  (3)* 返回值，指针型函数(得到的结果是指针) 
 都可以用指针修饰   void (*functionName)(int a);  //函数指针

   int * functionName(int p);    //指针型函数
   int  (* functionName)(int p); //函数指针
   void  functionName(int *p);    //普通函数	

   //这里交换指针的值   void swap(int * _p1,int * _p2)   {       int temp;       temp = *_p1;  //把_p1 中的值取出赋值给 temp       *_p1 = *_p2;       *_p2 = temp;   }   (int *) functionName(int a);  //指针函数   (void *) functionName(int a); //void * 表示返回值是任意类型的指针

    //这里交换指针的值   int * swap(int * _p1,int * _p2)   {        int *temp;    	temp = _p1; //直接把地址赋值给temp    	_p1 = _p2;    	_p2 = temp;	return temp;   }   在程序运行中，函数代码是程序的算法指令部分用{} 表示，它们和数组{}一样也占用存储空间，
都有相应的地址。

分析 函数 与  数组  在内存分配时的相似处。
(1)数组分配连续的内存空间，函数也一样分配连续内存空间；
(2)数组名字，代表数组第一个内存块的地址--首地址，找到这个地址就可以找到整个数组；
   类似的，函数名字，也可以代表 函数第一块内存的地址----首地址
(3)数组有固定长度，分配前确定；函数内存长度，不知道。我们可以在内存中
   通过一个专门的指针，指向函数的首地址，并通过这个指针，访问整个函数。
a、可以使用    指针变量  指向   数组的首地址，b、也可以使用  指针变量  指向  函数代码的首地址，c、指向   函数代码首地址的指针变量   称为  函数指针。(指向函数首地址的指针)【函数指针】1．函数指针定义函数类型 （*指针变量名）(形参列表)；“函数类型”说明函数的返回类型，由于“()”的优先级高于“*”,所以指针变量名外的括号必不可少，后面的“形参列表”表示指针变量指向的函数所带的参数列表。例如：int (*f)(int x);double (*ptr)(double x);注意： a、函数指针和它指向的函数的参数个数和类型都应该是一致的；b、函数指针的类型和函数的返回值类型也必须是一致的。2．函数指针的赋值函数名和数组名一样代表了函数代码的首地址，因此赋值  就是 直接将函数指针指向函数名。例如，int func(int x);   /* 声明一个函数 */int (*f) (int x);    /* 声明一个函数指针 */f=func;            /* 将func函数的首地址赋给指针f */注意：a、赋值时函数func不带括号，也不带参数;b、由于func代表函数的首地址，因此经过赋值以后，指针f就指向函数func(x)的代码的首地址。3．通过函数指针调用函数函数指针是通过函数名及有关参数进行调用的。与其他指针变量相类似，如果指针变量pi是指向某整型变量i的指针，则*p等于它所指的变量i；同样地，*f是指向函数func(x)的指针，则*f就代表它所指向的函数func。所以在执行了f=func;之后，(*f)和 func代表同一函数。由于函数指针指向存储区中的某个函数，因此可以通过函数指针调用相应的函数。现在我们就讨论如何用函数指针调用函数，它应执行下面三步：(1)要定义   函数指针变量。例如：int (*f)(int x);(2)要对函数指针变量赋值。例如： f=func;    (func(x)必须先要有定义)(3)要用 (*指针变量)(参数表);调用函数。例如：    (*f)(x);(x必须先赋值)【例】任意输入n个数，找出其中最大数，并且输出最大数值。Int   f(int a,int b);    //声明一个函数 main(){        int i，a，b;        scanf("%d"，&a);	        int (*p)(int a,int b);    /* 定义函数指针 */        p=f;            /* 给函数指针p赋值，使它指向函数f */        for(i＝1;i<9;i++)        {                 scanf("%d"，&b);                a＝(*p)(a，b);    /* 通过指针p调用函数f */        }        printf("The Max Number is :%d \n"，a);}//实现一个函数,从两个数字中找出较大的一个int  f(int x，int y){    int z;    z＝(x>y)?x:y;    return(z);}运行结果为：343 -45 4389 4235 1 -534 988 555 789↙The Max Number is：4389【指针函数】一个函数不仅可以带回一个整型数据的值，字符类型值和实型类型的值，还可以带回指针类型的数据，使其指向某个地址单元。        返回指针的函数，一般定义格式为：        类型标识符    *  函数名(参数表)        (int * ) f(x，y);其中x，y是形式参数，f是函数名，调用后返回一个指向整型数据的地址指针。f(x，y)是函数，其值是指针。如：char *ch();表示的就是一个返回字符型指针的函数，请看下面的例题：【例】将字符串1(str1)复制到字符串2(str2)，并输出字符串2.#include "stdio.h"main(){    char *ch(char *，char *);    char str1[]="I am glad to meet you!";    char str2[]="Welcom to study C!";    printf("%s"，ch(str1，str2));}char *ch(char *str1，char *str2){    int i;    char *p;    p=str2     if(*str2==NULL) exit(-1);    do    {         *str2=*str1;        str1++;        str2++;    }while(*str1!=NULL);    return(p);}综述：1、指针与连续内存的关系；2、数组指针，用指针，操作数组中的数据，把数组的首地址赋值给指针，通过对指针做加法，得到数组中的值，也可以往数组中写入值；	一维、二维、、、、、n 维数组都可以用 数组指针操作；3、指针数组，普通数组，存储的全部是指针4、函数指针是一个指向函数的指针，5、而指针函数只是说明他是一个返回值为指针的函数，













